/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Utils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Utils__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "Create2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Create2__factory>;
    getContractFactory(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSA__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3SwapCallback__factory>;
    getContractFactory(
      name: "IPeripheryPayments",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPeripheryPayments__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "BaseAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseAccount__factory>;
    getContractFactory(
      name: "BasePaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasePaymaster__factory>;
    getContractFactory(
      name: "EntryPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EntryPoint__factory>;
    getContractFactory(
      name: "EntryPointSimulations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EntryPointSimulations__factory>;
    getContractFactory(
      name: "NonceManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonceManager__factory>;
    getContractFactory(
      name: "SenderCreator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SenderCreator__factory>;
    getContractFactory(
      name: "StakeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeManager__factory>;
    getContractFactory(
      name: "UserOperationLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserOperationLib__factory>;
    getContractFactory(
      name: "IAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccount__factory>;
    getContractFactory(
      name: "IAccountExecute",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccountExecute__factory>;
    getContractFactory(
      name: "IAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAggregator__factory>;
    getContractFactory(
      name: "IEntryPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEntryPoint__factory>;
    getContractFactory(
      name: "IEntryPointSimulations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEntryPointSimulations__factory>;
    getContractFactory(
      name: "INonceManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INonceManager__factory>;
    getContractFactory(
      name: "IPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPaymaster__factory>;
    getContractFactory(
      name: "IStakeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeManager__factory>;
    getContractFactory(
      name: "BLSAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BLSAccount__factory>;
    getContractFactory(
      name: "BLSAccountFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BLSAccountFactory__factory>;
    getContractFactory(
      name: "BLSSignatureAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BLSSignatureAggregator__factory>;
    getContractFactory(
      name: "IBLSAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBLSAccount__factory>;
    getContractFactory(
      name: "BLSOpen",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BLSOpen__factory>;
    getContractFactory(
      name: "BNPairingPrecompileCostEstimator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BNPairingPrecompileCostEstimator__factory>;
    getContractFactory(
      name: "TokenCallbackHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenCallbackHandler__factory>;
    getContractFactory(
      name: "LegacyTokenPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LegacyTokenPaymaster__factory>;
    getContractFactory(
      name: "SimpleAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleAccount__factory>;
    getContractFactory(
      name: "SimpleAccountFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleAccountFactory__factory>;
    getContractFactory(
      name: "TokenPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenPaymaster__factory>;
    getContractFactory(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: "OracleHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleHelper__factory>;
    getContractFactory(
      name: "UniswapHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapHelper__factory>;
    getContractFactory(
      name: "VerifyingPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifyingPaymaster__factory>;
    getContractFactory(
      name: "BrokenBLSAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BrokenBLSAccount__factory>;
    getContractFactory(
      name: "BrokenBLSAccountFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BrokenBLSAccountFactory__factory>;
    getContractFactory(
      name: "MaliciousAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MaliciousAccount__factory>;
    getContractFactory(
      name: "TestAggregatedAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestAggregatedAccount__factory>;
    getContractFactory(
      name: "TestAggregatedAccountFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestAggregatedAccountFactory__factory>;
    getContractFactory(
      name: "TestCounter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestCounter__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "TestExecAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestExecAccount__factory>;
    getContractFactory(
      name: "TestExecAccountFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestExecAccountFactory__factory>;
    getContractFactory(
      name: "TestExpirePaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestExpirePaymaster__factory>;
    getContractFactory(
      name: "TestExpiryAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestExpiryAccount__factory>;
    getContractFactory(
      name: "TestHelpers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestHelpers__factory>;
    getContractFactory(
      name: "TestOracle2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestOracle2__factory>;
    getContractFactory(
      name: "TestPaymasterAcceptAll",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestPaymasterAcceptAll__factory>;
    getContractFactory(
      name: "TestPaymasterRevertCustomError",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestPaymasterRevertCustomError__factory>;
    getContractFactory(
      name: "TestPaymasterWithPostOp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestPaymasterWithPostOp__factory>;
    getContractFactory(
      name: "TestRevertAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestRevertAccount__factory>;
    getContractFactory(
      name: "TestSignatureAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestSignatureAggregator__factory>;
    getContractFactory(
      name: "TestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestToken__factory>;
    getContractFactory(
      name: "TestUniswap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestUniswap__factory>;
    getContractFactory(
      name: "TestUtil",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestUtil__factory>;
    getContractFactory(
      name: "TestWarmColdAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestWarmColdAccount__factory>;
    getContractFactory(
      name: "TestWrappedNativeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestWrappedNativeToken__factory>;
    getContractFactory(
      name: "TikTrixEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TikTrixEscrow__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "IERC5267",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Utils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Utils>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "Address",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "Create2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Create2>;
    getContractAt(
      name: "ECDSA",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSA>;
    getContractAt(
      name: "EIP712",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Math",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Math>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "ShortStrings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "Strings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "IUniswapV3SwapCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    getContractAt(
      name: "IPeripheryPayments",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPeripheryPayments>;
    getContractAt(
      name: "ISwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter>;
    getContractAt(
      name: "BaseAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseAccount>;
    getContractAt(
      name: "BasePaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasePaymaster>;
    getContractAt(
      name: "EntryPoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EntryPoint>;
    getContractAt(
      name: "EntryPointSimulations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EntryPointSimulations>;
    getContractAt(
      name: "NonceManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NonceManager>;
    getContractAt(
      name: "SenderCreator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SenderCreator>;
    getContractAt(
      name: "StakeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeManager>;
    getContractAt(
      name: "UserOperationLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UserOperationLib>;
    getContractAt(
      name: "IAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccount>;
    getContractAt(
      name: "IAccountExecute",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccountExecute>;
    getContractAt(
      name: "IAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAggregator>;
    getContractAt(
      name: "IEntryPoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEntryPoint>;
    getContractAt(
      name: "IEntryPointSimulations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEntryPointSimulations>;
    getContractAt(
      name: "INonceManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INonceManager>;
    getContractAt(
      name: "IPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPaymaster>;
    getContractAt(
      name: "IStakeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakeManager>;
    getContractAt(
      name: "BLSAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BLSAccount>;
    getContractAt(
      name: "BLSAccountFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BLSAccountFactory>;
    getContractAt(
      name: "BLSSignatureAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BLSSignatureAggregator>;
    getContractAt(
      name: "IBLSAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBLSAccount>;
    getContractAt(
      name: "BLSOpen",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BLSOpen>;
    getContractAt(
      name: "BNPairingPrecompileCostEstimator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BNPairingPrecompileCostEstimator>;
    getContractAt(
      name: "TokenCallbackHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenCallbackHandler>;
    getContractAt(
      name: "LegacyTokenPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LegacyTokenPaymaster>;
    getContractAt(
      name: "SimpleAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleAccount>;
    getContractAt(
      name: "SimpleAccountFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleAccountFactory>;
    getContractAt(
      name: "TokenPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenPaymaster>;
    getContractAt(
      name: "IOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: "OracleHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleHelper>;
    getContractAt(
      name: "UniswapHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapHelper>;
    getContractAt(
      name: "VerifyingPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifyingPaymaster>;
    getContractAt(
      name: "BrokenBLSAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BrokenBLSAccount>;
    getContractAt(
      name: "BrokenBLSAccountFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BrokenBLSAccountFactory>;
    getContractAt(
      name: "MaliciousAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MaliciousAccount>;
    getContractAt(
      name: "TestAggregatedAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestAggregatedAccount>;
    getContractAt(
      name: "TestAggregatedAccountFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestAggregatedAccountFactory>;
    getContractAt(
      name: "TestCounter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestCounter>;
    getContractAt(
      name: "TestERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "TestExecAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestExecAccount>;
    getContractAt(
      name: "TestExecAccountFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestExecAccountFactory>;
    getContractAt(
      name: "TestExpirePaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestExpirePaymaster>;
    getContractAt(
      name: "TestExpiryAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestExpiryAccount>;
    getContractAt(
      name: "TestHelpers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestHelpers>;
    getContractAt(
      name: "TestOracle2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestOracle2>;
    getContractAt(
      name: "TestPaymasterAcceptAll",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestPaymasterAcceptAll>;
    getContractAt(
      name: "TestPaymasterRevertCustomError",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestPaymasterRevertCustomError>;
    getContractAt(
      name: "TestPaymasterWithPostOp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestPaymasterWithPostOp>;
    getContractAt(
      name: "TestRevertAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestRevertAccount>;
    getContractAt(
      name: "TestSignatureAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestSignatureAggregator>;
    getContractAt(
      name: "TestToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestToken>;
    getContractAt(
      name: "TestUniswap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestUniswap>;
    getContractAt(
      name: "TestUtil",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestUtil>;
    getContractAt(
      name: "TestWarmColdAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestWarmColdAccount>;
    getContractAt(
      name: "TestWrappedNativeToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestWrappedNativeToken>;
    getContractAt(
      name: "TikTrixEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TikTrixEscrow>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
