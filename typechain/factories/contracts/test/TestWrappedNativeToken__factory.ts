/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestWrappedNativeToken,
  TestWrappedNativeTokenInterface,
} from "../../../contracts/test/TestWrappedNativeToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040518060400160405280601481526020017f57726170706564204e617469766520546f6b656e00000000000000000000000081525060405180604001604052806005815260200164776e546f6b60d81b815250816003908162000077919062000136565b50600462000086828262000136565b50505062000202565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000ba57607f821691505b602082108103620000db57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000131576000816000526020600020601f850160051c810160208610156200010c5750805b601f850160051c820191505b818110156200012d5782815560010162000118565b5050505b505050565b81516001600160401b038111156200015257620001526200008f565b6200016a81620001638454620000a5565b84620000e1565b602080601f831160018114620001a25760008415620001895750858301515b600019600386901b1c1916600185901b1785556200012d565b600085815260208120601f198616915b82811015620001d357888601518255948401946001909101908401620001b2565b5085821015620001f25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610b9b80620002126000396000f3fe6080604052600436106100c05760003560e01c8063313ce56711610074578063a9059cbb1161004e578063a9059cbb14610202578063d0e30db014610222578063dd62ed3e1461022a57600080fd5b8063313ce5671461018e57806370a08231146101aa57806395d89b41146101ed57600080fd5b806318160ddd116100a557806318160ddd1461012f57806323b872dd1461014e5780632e1a7d4d1461016e57600080fd5b806306fdde03146100d4578063095ea7b3146100ff57600080fd5b366100cf576100cd61027d565b005b600080fd5b3480156100e057600080fd5b506100e9610289565b6040516100f6919061096e565b60405180910390f35b34801561010b57600080fd5b5061011f61011a366004610a04565b61031b565b60405190151581526020016100f6565b34801561013b57600080fd5b506002545b6040519081526020016100f6565b34801561015a57600080fd5b5061011f610169366004610a2e565b610335565b34801561017a57600080fd5b506100cd610189366004610a6a565b610359565b34801561019a57600080fd5b50604051601281526020016100f6565b3480156101b657600080fd5b506101406101c5366004610a83565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b3480156101f957600080fd5b506100e961041e565b34801561020e57600080fd5b5061011f61021d366004610a04565b61042d565b6100cd61027d565b34801561023657600080fd5b50610140610245366004610aa5565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b610287333461043b565b565b60606003805461029890610ad8565b80601f01602080910402602001604051908101604052809291908181526020018280546102c490610ad8565b80156103115780601f106102e657610100808354040283529160200191610311565b820191906000526020600020905b8154815290600101906020018083116102f457829003601f168201915b5050505050905090565b600033610329818585610497565b60019150505b92915050565b6000336103438582856104a9565b61034e858585610578565b506001949350505050565b6103633382610623565b604051600090339083908381818185875af1925050503d80600081146103a5576040519150601f19603f3d011682016040523d82523d6000602084013e6103aa565b606091505b505090508061041a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c6564000000000000000000000000000000000060448201526064015b60405180910390fd5b5050565b60606004805461029890610ad8565b600033610329818585610578565b73ffffffffffffffffffffffffffffffffffffffff821661048b576040517fec442f0500000000000000000000000000000000000000000000000000000000815260006004820152602401610411565b61041a6000838361067b565b6104a48383836001610826565b505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146105725781811015610563576040517ffb8f41b200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024810182905260448101839052606401610411565b61057284848484036000610826565b50505050565b73ffffffffffffffffffffffffffffffffffffffff83166105c8576040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260006004820152602401610411565b73ffffffffffffffffffffffffffffffffffffffff8216610618576040517fec442f0500000000000000000000000000000000000000000000000000000000815260006004820152602401610411565b6104a483838361067b565b73ffffffffffffffffffffffffffffffffffffffff8216610673576040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260006004820152602401610411565b61041a826000835b73ffffffffffffffffffffffffffffffffffffffff83166106b35780600260008282546106a89190610b2b565b909155506107659050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610739576040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024810182905260448101839052606401610411565b73ffffffffffffffffffffffffffffffffffffffff841660009081526020819052604090209082900390555b73ffffffffffffffffffffffffffffffffffffffff821661078e576002805482900390556107ba565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090208054820190555b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161081991815260200190565b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8416610876576040517fe602df0500000000000000000000000000000000000000000000000000000000815260006004820152602401610411565b73ffffffffffffffffffffffffffffffffffffffff83166108c6576040517f94280d6200000000000000000000000000000000000000000000000000000000815260006004820152602401610411565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526001602090815260408083209387168352929052208290558015610572578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161096091815260200190565b60405180910390a350505050565b60006020808352835180602085015260005b8181101561099c57858101830151858201604001528201610980565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff811681146109ff57600080fd5b919050565b60008060408385031215610a1757600080fd5b610a20836109db565b946020939093013593505050565b600080600060608486031215610a4357600080fd5b610a4c846109db565b9250610a5a602085016109db565b9150604084013590509250925092565b600060208284031215610a7c57600080fd5b5035919050565b600060208284031215610a9557600080fd5b610a9e826109db565b9392505050565b60008060408385031215610ab857600080fd5b610ac1836109db565b9150610acf602084016109db565b90509250929050565b600181811c90821680610aec57607f821691505b602082108103610b25577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8082018082111561032f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220f5e4c48facf644791a1766c3f67cfa4a6998ae83e6e30ad3386d0ac904123c2f64736f6c63430008170033";

type TestWrappedNativeTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestWrappedNativeTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestWrappedNativeToken__factory extends ContractFactory {
  constructor(...args: TestWrappedNativeTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestWrappedNativeToken> {
    return super.deploy(overrides || {}) as Promise<TestWrappedNativeToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestWrappedNativeToken {
    return super.attach(address) as TestWrappedNativeToken;
  }
  override connect(signer: Signer): TestWrappedNativeToken__factory {
    return super.connect(signer) as TestWrappedNativeToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestWrappedNativeTokenInterface {
    return new utils.Interface(_abi) as TestWrappedNativeTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestWrappedNativeToken {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestWrappedNativeToken;
  }
}
