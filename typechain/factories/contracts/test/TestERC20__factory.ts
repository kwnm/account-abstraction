/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestERC20,
  TestERC20Interface,
} from "../../../contracts/test/TestERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "sudoApprove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "sudoMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "sudoTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162000e8738038062000e87833981016040819052620000349162000232565b6040518060400160405280600981526020016805465737445524332360bc1b8152506040518060400160405280600381526020016205432360ec1b815250816003908162000083919062000305565b50600462000092828262000305565b505050620000b13369d3c21bcecceda1000000620000bd60201b60201c565b60ff16608052620003f9565b6001600160a01b038216620000ed5760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b620000fb60008383620000ff565b5050565b6001600160a01b0383166200012e578060026000828254620001229190620003d1565b90915550620001a29050565b6001600160a01b03831660009081526020819052604090205481811015620001835760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401620000e4565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216620001c057600280548290039055620001df565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200022591815260200190565b60405180910390a3505050565b6000602082840312156200024557600080fd5b815160ff811681146200025757600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200028957607f821691505b602082108103620002aa57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000300576000816000526020600020601f850160051c81016020861015620002db5750805b601f850160051c820191505b81811015620002fc57828155600101620002e7565b5050505b505050565b81516001600160401b038111156200032157620003216200025e565b620003398162000332845462000274565b84620002b0565b602080601f831160018114620003715760008415620003585750858301515b600019600386901b1c1916600185901b178555620002fc565b600085815260208120601f198616915b82811015620003a25788860151825594840194600190910190840162000381565b5085821015620003c15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115620003f357634e487b7160e01b600052601160045260246000fd5b92915050565b608051610a7262000415600039600061016e0152610a726000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063313ce56711610081578063a9059cbb1161005b578063a9059cbb146101d6578063dd62ed3e146101e9578063fb4dcefa1461022f57600080fd5b8063313ce5671461016757806370a082311461019857806395d89b41146101ce57600080fd5b806318160ddd116100b257806318160ddd1461012f57806323b872dd146101415780632d688ca81461015457600080fd5b806305ea5c22146100d957806306fdde03146100ee578063095ea7b31461010c575b600080fd5b6100ec6100e7366004610887565b610242565b005b6100f6610252565b60405161010391906108c3565b60405180910390f35b61011f61011a366004610930565b6102e4565b6040519015158152602001610103565b6002545b604051908152602001610103565b61011f61014f366004610887565b6102fe565b6100ec610162366004610930565b610322565b60405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610103565b6101336101a636600461095a565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6100f6610330565b61011f6101e4366004610930565b61033f565b6101336101f736600461097c565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6100ec61023d36600461097c565b61034d565b61024d838383610383565b505050565b606060038054610261906109af565b80601f016020809104026020016040519081016040528092919081815260200182805461028d906109af565b80156102da5780601f106102af576101008083540402835291602001916102da565b820191906000526020600020905b8154815290600101906020018083116102bd57829003601f168201915b5050505050905090565b6000336102f2818585610383565b60019150505b92915050565b60003361030c858285610390565b610317858585610464565b506001949350505050565b61032c828261050f565b5050565b606060048054610261906109af565b6000336102f2818585610464565b61032c828261037e8573ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b610464565b61024d838383600161056b565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461045e578181101561044f576040517ffb8f41b200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260248101829052604481018390526064015b60405180910390fd5b61045e8484848403600061056b565b50505050565b73ffffffffffffffffffffffffffffffffffffffff83166104b4576040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260006004820152602401610446565b73ffffffffffffffffffffffffffffffffffffffff8216610504576040517fec442f0500000000000000000000000000000000000000000000000000000000815260006004820152602401610446565b61024d8383836106b3565b73ffffffffffffffffffffffffffffffffffffffff821661055f576040517fec442f0500000000000000000000000000000000000000000000000000000000815260006004820152602401610446565b61032c600083836106b3565b73ffffffffffffffffffffffffffffffffffffffff84166105bb576040517fe602df0500000000000000000000000000000000000000000000000000000000815260006004820152602401610446565b73ffffffffffffffffffffffffffffffffffffffff831661060b576040517f94280d6200000000000000000000000000000000000000000000000000000000815260006004820152602401610446565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600160209081526040808320938716835292905220829055801561045e578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516106a591815260200190565b60405180910390a350505050565b73ffffffffffffffffffffffffffffffffffffffff83166106eb5780600260008282546106e09190610a02565b9091555061079d9050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610771576040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024810182905260448101839052606401610446565b73ffffffffffffffffffffffffffffffffffffffff841660009081526020819052604090209082900390555b73ffffffffffffffffffffffffffffffffffffffff82166107c6576002805482900390556107f2565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090208054820190555b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161085191815260200190565b60405180910390a3505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461088257600080fd5b919050565b60008060006060848603121561089c57600080fd5b6108a58461085e565b92506108b36020850161085e565b9150604084013590509250925092565b60006020808352835180602085015260005b818110156108f1578581018301518582016040015282016108d5565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b6000806040838503121561094357600080fd5b61094c8361085e565b946020939093013593505050565b60006020828403121561096c57600080fd5b6109758261085e565b9392505050565b6000806040838503121561098f57600080fd5b6109988361085e565b91506109a66020840161085e565b90509250929050565b600181811c908216806109c357607f821691505b6020821081036109fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b808201808211156102f8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220eb0eedcc93e85242572a54afca02d05370fb602dcd1fad2ffc29c4db1921a5d664736f6c63430008170033";

type TestERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestERC20__factory extends ContractFactory {
  constructor(...args: TestERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestERC20> {
    return super.deploy(_decimals, overrides || {}) as Promise<TestERC20>;
  }
  override getDeployTransaction(
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_decimals, overrides || {});
  }
  override attach(address: string): TestERC20 {
    return super.attach(address) as TestERC20;
  }
  override connect(signer: Signer): TestERC20__factory {
    return super.connect(signer) as TestERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestERC20Interface {
    return new utils.Interface(_abi) as TestERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestERC20 {
    return new Contract(address, _abi, signerOrProvider) as TestERC20;
  }
}
