/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestUtil,
  TestUtilInterface,
} from "../../../contracts/test/TestUtil";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "accountGasLimits",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "gasFees",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct PackedUserOperation",
        name: "op",
        type: "tuple",
      },
    ],
    name: "encodeUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610294806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a124062e14610030575b600080fd5b61004361003e366004610142565b610059565b6040516100509190610185565b60405180910390f35b60606100648261006a565b92915050565b606081356020830135600061008a61008560408701876101f2565b61012f565b9050600061009e61008560608801886101f2565b9050608086013560a087013560c088013560006100c161008560e08c018c6101f2565b6040805173ffffffffffffffffffffffffffffffffffffffff9a909a1660208b015289810198909852606089019690965250608087019390935260a086019190915260c085015260e08401526101008084019190915281518084039091018152610120909201905292915050565b6000604051828085833790209392505050565b60006020828403121561015457600080fd5b813567ffffffffffffffff81111561016b57600080fd5b8201610120818503121561017e57600080fd5b9392505050565b60006020808352835180602085015260005b818110156101b357858101830151858201604001528201610197565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261022757600080fd5b83018035915067ffffffffffffffff82111561024257600080fd5b60200191503681900382131561025757600080fd5b925092905056fea26469706673582212200ef9d23425c3cf5da288c579700caceef4fe86f0a7c6ad6fbef3a8969b50580d64736f6c63430008170033";

type TestUtilConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestUtilConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestUtil__factory extends ContractFactory {
  constructor(...args: TestUtilConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestUtil> {
    return super.deploy(overrides || {}) as Promise<TestUtil>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestUtil {
    return super.attach(address) as TestUtil;
  }
  override connect(signer: Signer): TestUtil__factory {
    return super.connect(signer) as TestUtil__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestUtilInterface {
    return new utils.Interface(_abi) as TestUtilInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestUtil {
    return new Contract(address, _abi, signerOrProvider) as TestUtil;
  }
}
